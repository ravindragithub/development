@isTest
global class mockTestsforCallouts{

global class updateAniServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.InventoryReturn  InventoryData = new CCDS_Inventory.InventoryReturn ();


        
        CCDS_Inventory.updateAniResponse_element responseElement=new CCDS_Inventory.updateAniResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}

global class addAniServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.InventoryReturn  InventoryData = new CCDS_Inventory.InventoryReturn ();


        
        CCDS_Inventory.addAniResponse_element responseElement=new CCDS_Inventory.addAniResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}

global class startOrderWithCustomerNumberServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.InventoryReturn InventoryData = new CCDS_Inventory.InventoryReturn ();


        
        CCDS_Inventory.startOrderWithCustomerNumberResponse_element responseElement=new CCDS_Inventory.startOrderWithCustomerNumberResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}


global class getLinesByTypeAndFidValuesServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.LinesReturn InventoryData = new CCDS_Inventory.LinesReturn ();


        
        CCDS_Inventory.getLinesByTypeAndFidValuesResponse_element responseElement=new CCDS_Inventory.getLinesByTypeAndFidValuesResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}



global class getEntityAnisByCustomerNumberAndStatusServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.AniReturn InventoryData = new CCDS_Inventory.AniReturn();


        
        CCDS_Inventory.getEntityAnisByCustomerNumberAndStatusResponse_element responseElement=new CCDS_Inventory.getEntityAnisByCustomerNumberAndStatusResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}


global class getMarketsByNpaNxxServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.MarketReturn InventoryData = new CCDS_Inventory.MarketReturn();


        
        CCDS_Inventory.getMarketsByNpaNxxResponse_element  responseElement=new CCDS_Inventory.getMarketsByNpaNxxResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}



global class updateMultipleLineAddressesServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.InventoryReturn InventoryData = new CCDS_Inventory.InventoryReturn ();


        
        CCDS_Inventory.updateMultipleLineAddressesResponse_element responseElement=new CCDS_Inventory.updateMultipleLineAddressesResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}




global class getEntityAniByLineNumberServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

CCDS_Inventory.AniWithBtnReturn InventoryData = new CCDS_Inventory.AniWithBtnReturn();


        
        CCDS_Inventory.getEntityAniByLineNumberResponse_element  responseElement=new CCDS_Inventory.getEntityAniByLineNumberResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
  
   }
}




global class terminateBtnServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {


  CCDS_Inventory.InventoryReturn InventoryData = new CCDS_Inventory.InventoryReturn();
        InventoryData.messages=new String[]{'dummymesage1','dummymesage2'}; 
        InventoryData.successful=true;
        InventoryData.transactionId=200;
        InventoryData.ids=new String[]{'dummymesage1','dummymesage2'}; 

        
        CCDS_Inventory.terminateBtnResponse_element  responseElement=new CCDS_Inventory.terminateBtnResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
   }
}



global class addVoipWithBtnServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {


        CCDS_Inventory.AddLineWithBtnReturn  InventoryData = new CCDS_Inventory.AddLineWithBtnReturn();
         
        
        CCDS_Inventory.addVoipWithBtnResponse_element  responseElement=new CCDS_Inventory.addVoipWithBtnResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
   }
}


global class updateLineAddressServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {


        CCDS_Inventory.InventoryReturn InventoryData = new CCDS_Inventory.InventoryReturn();
        InventoryData.messages=new String[]{'dummymesage1','dummymesage2'}; 
        InventoryData.successful=true;
        InventoryData.transactionId=200;
        InventoryData.ids=new String[]{'dummymesage1','dummymesage2'}; 

        
        
        CCDS_Inventory.updateLineAddressResponse_element  responseElement=new CCDS_Inventory.updateLineAddressResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
   }
}

global class moveBtnServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {


        CCDS_Inventory.InventoryReturn InventoryData = new CCDS_Inventory.InventoryReturn();
        InventoryData.messages=new String[]{'dummymesage1','dummymesage2'}; 
        InventoryData.successful=true;
        InventoryData.transactionId=200;
        InventoryData.ids=new String[]{'dummymesage1','dummymesage2'}; 

        
        CCDS_Inventory.moveBtnResponse_element  responseElement=new CCDS_Inventory.moveBtnResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
   }
}
global class getLinesByLineNumberServiceMockImpl implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {

        CCDS_Inventory.LinesReturn InventoryData = new CCDS_Inventory.LinesReturn();
        list<CCDS_Inventory.Line> lines=new list<CCDS_Inventory.Line>();
        InventoryData.lines=lines; 
       
        
        CCDS_Inventory.getLinesByLineNumberResponse_element  responseElement=new CCDS_Inventory.getLinesByLineNumberResponse_element();
        responseElement.return_x=InventoryData ;

        response.put('response_x', responseElement); 
   }
}

}