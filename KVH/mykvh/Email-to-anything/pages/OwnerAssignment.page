<apex:page standardController="ortoo_e2a__Pattern_Based_Rule__c" extensions="ortoo_e2a.OwnerAssignmentExtension" id="thePage" tabStyle="Email_Services_Functions__tab">
	<apex:includeScript value="{!URLFOR($Resource.ortoo_e2a__jQuery, 'jQuery/js/jquery-1.11.2.min.js')}"/>
	<link href="{!URLFOR($Resource.sumoselect, 'sumoselect/sumoselect.css')}" rel="stylesheet" media="screen"/>
	<apex:includeScript value="{!URLFOR($Resource.ortoo_e2a__sumoselect, 'sumoselect/jquery.sumoselect.js')}"/>
	<style>
    /*Sumo select CSS update*/
    .SumoSelect > .CaptionCont {
    	min-height:5px;
    	height: 9px;
    	width: 160px;
    	border-spacing: 2px;
  		border: 1px solid rgb(169, 169, 169);
  		background: white;
  		display: inline-block;
  		text-align: start;
  		font-family: Arial;
	    font-size: 13.3333330154419px;
	    font-style: normal;
	    font-variant: normal;
	    font-weight: normal;
	    line-height: normal;
    }
    .SumoSelect > .CaptionCont > span{
  		margin-top: -2px;
    }
    </style>
    
    <!-- Multiselect Plugin Resources for IE - Javascript based component -->
    <link href="{!URLFOR($Resource.MultiselectDropdown, '/MSDList.css')}" rel="stylesheet" media="screen"/>
    <apex:includeScript value="{!URLFOR($Resource.ortoo_e2a__MultiselectDropdown, '/MSDList.js')}"/>
    
	<script type="text/javascript">
		function pageInit()
		{
			$(document).ready(
				function()
				{
					var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6
					if(isIE == false)
					{
						window.asd = $('.SelectBox').SumoSelect({ csvDispCount: 3 });
						getSearchInValue();
					}
					else
					{
						if(document.getElementById('combobox2') != null)
						{
							var comboboxList = new MSDList("combobox2");
							comboboxList.setFilterVisible(false);
							comboboxList.render();
							comboboxList.unselectAllItems();
							getSearchInValueinMultiSelectList(comboboxList ,'thePage:theForm:viewPageBlock:OwnerPageBlockSection:searchInBlockSectionItem:searchInValuehidden');
						}
					}
				}
			);
		}
		function SetSearchInValue()
		{
			var ele = document.getElementById("combobox");

			var SelVal = "";
			var x = 0;
			var saveIndex = 0;
			for(x = 0; x < ele.length; x++)
			{
				if(ele[x].selected)
				{
					SelVal = SelVal + ele[x].value;
					saveIndex = x+1;
					break;
				}
			}
			for(x = saveIndex; x < ele.length; x++)
			{
				if(ele[x].selected)
				{
					//alert(InvForm.SelBranch[x].value);
					SelVal = SelVal + ";" + ele[x].value;
				}
			}
			document.getElementById('thePage:theForm:viewPageBlock:OwnerPageBlockSection:searchInBlockSectionItem:searchInValuehidden').value = SelVal;
		}
		function getSearchInValue()
		{
			//handling for view mode
			if(document.getElementById('thePage:theForm:viewPageBlock:OwnerPageBlockSection:searchInBlockSectionItem:searchInValuehidden') != null)
			{
				var searchInValue = document.getElementById('thePage:theForm:viewPageBlock:OwnerPageBlockSection:searchInBlockSectionItem:searchInValuehidden').value;
				var searchInList = searchInValue.split(";")
				//alert(searchInValue);
				var arrayLength = searchInList.length;
				for (var i = 0; i < arrayLength; i++)
				{
					if(searchInList[i].localeCompare("Subject")==0)
					{
						$('.SelectBox')[0].sumo.selectItem(0);
					}
					else if(searchInList[i].localeCompare("Body (Text Only)")==0)
			        {
			            $('.SelectBox')[0].sumo.selectItem(1);
			        }
					else if(searchInList[i].localeCompare("Body")==0)
					{
						$('.SelectBox')[0].sumo.selectItem(2);
					}
					else if(searchInList[i].localeCompare("Headers")==0)
					{
						$('.SelectBox')[0].sumo.selectItem(3);
					}
					else if(searchInList[i].localeCompare("To")==0)
					{
						$('.SelectBox')[0].sumo.selectItem(4);
					}
					else if(searchInList[i].localeCompare("From")==0)
					{
						$('.SelectBox')[0].sumo.selectItem(5);
					}
					else if(searchInList[i].localeCompare("CC")==0)
					{
						$('.SelectBox')[0].sumo.selectItem(6);
					}
					else if(searchInList[i].localeCompare("Email Service Address")==0)
					{
						$('.SelectBox')[0].sumo.selectItem(7);
					}
				}
			}
		}
		function SetSearchInValueinMultiSelectList_local(SelVal , elementId)
		{
			document.getElementById('thePage:theForm:viewPageBlock:OwnerPageBlockSection:searchInBlockSectionItem:searchInValuehidden').value = SelVal;
		}
		pageInit();
	</script>
	<apex:form id="theForm">
		<apex:sectionHeader title="e2a Action Rule"/>
		&nbsp;&#171;&nbsp;
		<apex:outputLink value="/apex/ortoo_e2a__EmailServicesFunction?id={!$CurrentPage.parameters.newid}&retURL={!$CurrentPage.parameters.retURL}">Back to:E2A Email Rules</apex:outputLink>
		<br/><br/>
		<apex:pageBlock id="headerPageBlock" rendered="{!EditIsActive == false}">
			
			<apex:pageBlockButtons >
			<apex:commandButton action="{!editRule}" value="Edit" />
			</apex:pageBlockButtons>
			<apex:pageblockSection collapsible="false" columns="1" id="ViewOwnerPageBlockSection">
				<apex:pageBlockSectionItem helpText="Order in which this rule is process with respect to others. Smaller number means early processing.">
					<apex:outputLabel value="Processing Order "/>
					<apex:outputText value="{!patternRule.ortoo_e2a__Order__c}"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Trigger this rule when regular expression pattern matches or not matches">
						<apex:outputLabel value="Trigger When"/>
						<apex:outputText value="{!patternRule.ortoo_e2a__Trigger_When__c}"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Regular expression to use for matching">
						<apex:outputLabel value="Match pattern"/>
						<apex:outputText value="{!patternRule.ortoo_e2a__Pattern__c}"/>
				</apex:pageBlockSectionItem>
				
				<apex:pageBlockSectionItem id="searchInBlockSectionItem" helpText="Email fields to search and match regular exression in">
						<apex:outputLabel value="Search In"/>
						<apex:outputText value="{!patternRule.ortoo_e2a__Search_In__c}"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Action to take when a match is found in either of specified Search In fields">
						<apex:outputLabel value="Action Type"/>
						<apex:outputText value="{!actionType}" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Email Rule" rendered="{!IF(actionTypeForOwnerValue == '3',true,false)}">
						<apex:outputLabel value="Email Rule"/>
						<apex:outputText value="{!actionIfNoMatchFoundSelectedService}" />
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem rendered="{!actionTypeForOwnerValue == '1'}" helpText="Select owner to assign new target object record to">
						<apex:outputLabel value="Assigned To owner"/>
						<apex:outputPanel >
						<apex:outputText value="{!AssignedOwnerType}"/>
						:&nbsp;
						<apex:outputText value="{!AssignedOwnerName}"/>
					</apex:outputPanel>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Select which unmatched queue to use as Owner when storing (unmatched) email" rendered="{!IF(actionTypeForOwnerValue == '3' || actionTypeForOwnerValue == '4',false,true)}">
						<apex:outputLabel value="Unmatched Email Queue"/>
						<apex:outputText value="{!UnmatchedQueue}"/>
				</apex:pageBlockSectionItem>
				<apex:pageBlockSectionItem helpText="Whether to stop process further rules when this rule is triggered">
						<apex:outputLabel value="Stop Processing Further Rules"/>
						<apex:outputField value="{!patternRule.ortoo_e2a__Stop_On_Match__c}"/>
				</apex:pageBlockSectionItem>
			</apex:pageblockSection>
		</apex:pageBlock>
			<apex:pageBlock id="viewPageBlock" rendered="{!EditIsActive == true}">
				<apex:pageBlockButtons >
					<apex:commandButton action="{!Save}" value="Save"/>
					<apex:commandButton action="{!Cancel}" value="Cancel"/>
				</apex:pageBlockButtons>
				<apex:pageMessages />
				<apex:pageblockSection collapsible="false" columns="1" id="OwnerPageBlockSection">
					<apex:pageBlockSectionItem helpText="Order in which this rule is process with respect to others. Smaller number means early processing.">
					<apex:outputLabel value="Processing Order"/>
					<apex:inputText value="{!patternRule.ortoo_e2a__Order__c}"/>
				   </apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="Trigger this rule when regular expression pattern matches or not matches">
						<apex:outputLabel value="Trigger When"/>
						<apex:selectList value="{!patternRule.ortoo_e2a__Trigger_When__c}" size="1"  >
						<apex:selectOptions value="{!triggerWhenOptions}"></apex:selectOptions>
					</apex:selectList>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="Regular expression to use for matching">
						<apex:outputLabel value="Match pattern"/>
						<apex:outputPanel layout="block">
						<apex:inputField value="{!patternRule.ortoo_e2a__Pattern__c}" id="OwnerPattern"/>
						<a title="Regex Builder" onclick="OpenRegexPopup('{!$Component.OwnerPattern}');"><b>[.*]</b></a>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					
					<apex:pageBlockSectionItem id="searchInBlockSectionItem" helpText="Email fields to search and match regular exression in">
						<apex:outputLabel value="Search In"/>
						<apex:outputPanel >
						<apex:outputPanel rendered="{!isIE == true}">
							<select id="combobox2" name="combobox2">
						       <option value="Subject">Subject</option>
						       <option value="Body (Text Only)">Body (Text Only)</option>
						       <option value="Body">Body</option>
						       <option value="Headers">Headers</option>
						       <option value="To">To</option>
						       <option value="From">From</option>
						       <option value="CC">CC</option>
						       <option value="Email Service Address">Email Service Address</option>
							</select>
						</apex:outputPanel>
						<apex:outputPanel rendered="{!isIE == false}">
							<select size="1" multiple="multiple"  class="SelectBox" id="combobox" name="combobox" onchange="SetSearchInValue();" align="left">
								<option value="Subject" align="left">Subject</option>
								<option value="Body (Text Only)">Body (Text Only)</option>
								<option value="Body" align="left">Body</option>
								<option value="Headers" align="left">Headers</option>
								<option value="To" align="left">To</option>
								<option value="From" align="left">From</option>
								<option value="CC" align="left">CC</option>
								<option value="Email Service Address">Email Service Address</option>
							</select>
						</apex:outputPanel>
						<apex:inputText value="{!patternRule.ortoo_e2a__Search_In__c}" id="searchInValuehidden" style="display:none"/>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem id="actionTypeBlockSectionItem" helpText="Action to take when a match is found in either of specified Search In fields">
						<apex:outputLabel value="Action Type"/>
						<apex:outputPanel >
							<apex:selectList value="{!actionTypeForOwnerValue}" size="1" id="actionTypeSelectList">
								<apex:selectOptions value="{!actionTypeForOwnerOptions}"></apex:selectOptions>
							</apex:selectList>
							<apex:actionSupport event="onchange" rerender="secondPBS" action="{!checkedAndDisableFurtherRules}"/>
						</apex:outputPanel>
					</apex:pageBlockSectionItem>
				</apex:pageBlockSection>
				<apex:pageBlockSection id="secondPBS" collapsible="false" columns="1" >
					<apex:pageBlockSectionItem helpText="Email Rule" rendered="{!IF(actionTypeForOwnerValue == '3',true,false)}">
						<apex:outputLabel value="Email Rule"/>
						<apex:selectList value="{!patternRule.ortoo_e2a__Action_if_No_Match_Go_To_Service__c}" size="1">
							<apex:selectOptions value="{!ActionIfNoMatchFoundServiceOptions}"></apex:selectOptions>
						</apex:selectList>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem id="ownerBlockSectionItem" rendered="{!actionTypeForOwnerValue == '1'}" helpText="Select owner to assign new target object record to">
						<apex:outputLabel value="Assigned To owner"/>
						<apex:PanelGrid columns="2">
				   	
							<apex:selectList value="{!patternRule.ortoo_e2a__Assign_To_Owner_Type__c}" size="1">
								<apex:selectOptions value="{!AssignedOwnerTypeOptions}"></apex:selectOptions>
								<apex:actionSupport event="onchange" reRender="secondPBS"/>
							</apex:selectList>
							<apex:inputField value="{!patternRule.ortoo_e2a__Assign_To_Owner_User__c}" id="ownerUser" rendered="{!patternRule.ortoo_e2a__Assign_To_Owner_Type__c != 'QUEUE'}"/>
							<apex:selectList value="{!patternRule.ortoo_e2a__Assign_To_Owner_Queue__c}" id="ownerQueue" size="1" rendered="{!patternRule.ortoo_e2a__Assign_To_Owner_Type__c == 'QUEUE'}">
								<apex:selectOptions value="{!AssignedOwnerQueueOptions}"></apex:selectOptions>
							</apex:selectList>
						</apex:PanelGrid>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="Select which unmatched queue to use as Owner when storing (unmatched) email" rendered="{!IF(actionTypeForOwnerValue == '3' || actionTypeForOwnerValue == '4',false,true)}">
						<apex:outputLabel value="Unmatched Email Queue"/>
						<apex:selectList value="{!patternRule.ortoo_e2a__Unmatched_Queue__c}" id="rejected_email_queue" size="1">
							<apex:selectOptions value="{!QueueOptions}"></apex:selectOptions>
						</apex:selectList>
					</apex:pageBlockSectionItem>
					<apex:pageBlockSectionItem helpText="Whether to stop process further rules when this rule is triggered">
						<apex:outputLabel value="Stop Processing Further Rules"/>
						<apex:outputPanel >
                       		 <apex:inputField value="{!patternRule.ortoo_e2a__Stop_On_Match__c}"  rendered="{!IF(disableStopOnMatch==false,true,false)}"/>
                            <apex:outputField value="{!patternRule.ortoo_e2a__Stop_On_Match__c}"  rendered="{!IF(disableStopOnMatch==true,true,false)}"/>
                        </apex:outputPanel>
					</apex:pageBlockSectionItem>
				</apex:pageblockSection>
			</apex:pageBlock>
	</apex:form>
	<script>
	function OpenRegexPopup(name)
	 {
	    	var regex = document.getElementById(name).value;
	       	var url="/apex/ortoo_e2a__RegexGenerator?namefield=" + name +"&oldregex="+regex;
	       	console.log('url'+url);
	       	try
	       	{
	       	    //Code for Client Potential DOM Open Redirect
		        if (validateURL(url))
		        {
			        var newWin=window.open(url, 'Popup','height=600,width=670,left=100,top=100,resizable=no,scrollbars=yes,toolbar=no,status=no');
			        if (window.focus) 
			        {
			            newWin.focus();
			        }
			        else 
			        {
               			 throw new InvalidURLException();
           		 	}
			    }
			}
			catch (e)
		    {
              if (e instanceof InvalidURLException)
                 alert(e.message);
            }
	            
	        return false;
	 }
	 function InvalidURLException()
	 {            
        this.message = "An attempt was made to open a webpage of foreign domain. No allowed.";
        this.toString = function()
        {
            return this.message
        };
     }

    function validateURL(surl)
    {
        var url = parseURL(surl);
        var url_host_name = url.hostname.trim();

        if (url_host_name == '')
        {
            return true;
        }
        else {
            if (url_host_name.toUpperCase() == location.hostname.trim().toUpperCase()) 
            {
                return true;
            }
            else
                return false;
        }            
    }

    function parseURL(url) 
    {
        var a = document.createElement('a');
        a.href = url;
        return {
            source: url,
            protocol: a.protocol.replace(':', ''),
            hostname: a.hostname,
            host: a.host,
            port: a.port,
            query: a.search,
            params: (function () {
                var ret = {},
                    seg = a.search.replace(/^\?/, '').split('&'),
                    len = seg.length, i = 0, s;
                for (; i < len; i++) {
                    if (!seg[i]) { continue; }
                    s = seg[i].split('=');
                    ret[s[0]] = s[1];
                }
                return ret;
            })(),
            file: (a.pathname.match(/\/([^\/?#]+)$/i) || [, ''])[1],
            hash: a.hash.replace('#', ''),
            path: a.pathname.replace(/^([^\/])/, '/$1'),
            relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ''])[1],
            segments: a.pathname.replace(/^\//, '').split('/')
        };
    } 
	</script>
</apex:page>